# -*- perl -*-
#
# Copyright Â© 2021 Felix Lechner
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

package Lintian::Data::Fonts;

use v5.20;
use warnings;
use utf8;

use Carp qw(croak);
use Const::Fast;
use File::Basename;
use IPC::Run3;
use List::SomeUtils qw(first_value uniq);
use Path::Tiny;
use PerlIO::gzip;
use Time::Piece;
use Unicode::UTF8 qw(encode_utf8);

use Moo;
use namespace::clean;

with 'Lintian::Data';

const my $EMPTY => q{};
const my $SPACE => q{ };

const my $NEWLINE => qq{\n};

const my $WAIT_STATUS_SHIFT => 8;

=head1 NAME

Lintian::Data::Fonts - Lintian interface for fonts.

=head1 SYNOPSIS

    use Lintian::Data::Fonts;

=head1 DESCRIPTION

This module provides a way to load data files for fonts.

=head1 INSTANCE METHODS

=over 4

=item preamble

=item location

=item separator

=item accumulator

=cut

has preamble => (
    is => 'rw',
    default => sub { { title => 'Fonts Available for Installation' } }
);

has location => (
    is => 'rw',
    default => 'files/fonts'
);

has separator => (
    is => 'rw',
    default => sub { qr{\s+} });

has accumulator => (is => 'rw');

=item refresh

=cut

sub refresh {
    my ($self, $basedir) = @_;

    my $work_folder
      = Path::Tiny->tempdir(
        TEMPLATE => 'refresh-debhelper-add-ons-XXXXXXXXXX');

    my $mirror_base = 'https://deb.debian.org/debian';

    # neutral sort order
    local $ENV{LC_ALL} = 'C';

    my $port = 'amd64';

    my %installable_names_by_font;

    my @wget_command = qw{/usr/bin/wget --no-verbose};

    for my $architecture ('all', $port) {

        my $file_name = "Contents-$architecture.gz";
        my $local_path = "$work_folder/$file_name";
        my $url = "$mirror_base/dists/sid/main/$file_name";

        say $EMPTY;
        say encode_utf8("Getting $file_name");

        my $stderr;
        run3([@wget_command, "--output-document=$local_path", $url],
            undef, \$stderr);
        my $status = ($? >> $WAIT_STATUS_SHIFT);

        # already in UTF-8
        die $stderr
          if $status;

        open(my $fd, '<:gzip', $local_path)
          or die encode_utf8("Cannot open $local_path.");

        while (my $line = <$fd>) {

            chomp $line;

            my ($path, $finder) = split($SPACE, $line, 2);
            next
              unless length $path
              && length $finder;

            if ($path =~ m{ [.] (?:[to]tf|pfb) $}ix) {

                my @locations = split(m{,}, $finder);
                for my $location (@locations) {

                    my ($section, $installable_name)
                      = split(m{/}, $location, 2);

        # Record only packages starting with ttf-, otf-, t1-, xfonts- or fonts-
                    next
                      unless $installable_name
                      =~ m{^ (?: [to]tf | t1 | x?fonts ) - }x;

                    # Fonts in xfonts-tipa are really shipped by tipa.
                    $installable_name = 'tipa'
                      if $installable_name eq 'xfonts-tipa';

                    my $basename = basename($path);
                    my $font = lc $basename;

                    $installable_names_by_font{$font} //= [];
                    push(
                        @{$installable_names_by_font{$font}},
                        $installable_name
                    );
                }

                next;
            }
        }

        close $fd;
    }

    say $EMPTY;

    path($basedir)->mkpath('files');

    my @font_lines;
    for my $font (keys %installable_names_by_font) {

        my @alternatives = @{$installable_names_by_font{$font}};

        push(@font_lines, $font . $SPACE . $_) for uniq @alternatives;
    }

    create_data_file("$basedir/files/fonts", (sort @font_lines));

    return;
}

sub create_data_file {
    my ($path, @lines) = @_;

    my $text = join($NEWLINE, @lines) . $NEWLINE;

    my $current_date = gmtime->datetime . 'Z';

    my $preamble =<<"EOF_EOF_EOF";
# Generated by private/refresh-fonts-data on $current_date
EOF_EOF_EOF

    my $contents = $preamble . $NEWLINE . $text;

    say "Writing $path";
    path($path)->spew_utf8($contents);

    return;
}

=back

=head1 AUTHOR

Originally written by Felix Lechner <felix.lechner@lease-up.com> for Lintian.

=head1 SEE ALSO

lintian(1)

=cut

1;

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
