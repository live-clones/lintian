#!/usr/bin/perl

# Copyright © 1998 Richard Braakman
# Copyright © 2008 Frank Lichtenheld
# Copyright © 2008, 2009 Russ Allbery
# Copyright © 2014 Niels Thykier
# Copyright © 2020 Felix Lechner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

# The harness for Lintian's test suite.  For detailed information on
# the test suite layout and naming conventions, see t/tests/README.
# For more information about running tests, see
# doc/tutorial/Lintian/Tutorial/TestSuite.pod
#

use v5.20;
use warnings;
use utf8;
use autodie;

use Capture::Tiny qw(capture_merged);
use Cwd;
use File::Basename;
use File::Path qw(make_path);
use File::Spec::Functions qw(abs2rel rel2abs splitpath splitdir);
use File::stat;
use Getopt::Long;
use List::MoreUtils qw(any uniq);
use List::Util qw(max);
use IO::Async::Function;
use IO::Async::Loop;
use Path::Tiny;
use TAP::Formatter::Console;
use TAP::Formatter::File;
use TAP::Harness;
use TAP::Parser::Aggregator;
use Term::ANSIColor;
use Try::Tiny;

BEGIN {
    # whitelist the environment we permit to avoid things that mess up
    # tests, like CFLAGS, DH_OPTIONS, DH_COMPAT, DEB_HOST_ARCH
    my %WHITELIST = map { $_ => 1 } qw(
      LINTIAN_TEST_INSTALLED
      NO_PKG_MANGLE
      PATH
      TMPDIR
    );

    # TODO: MAKEFLAGS - some of the tests don't cope too well with it
    for my $var (keys %ENV) {
        delete $ENV{$var} unless exists $WHITELIST{$var};
    }

    # Ubuntu auto-builders run pkg-mangle which messes up test packages
    $ENV{'NO_PKG_MANGLE'} = 'true'
      unless exists($ENV{'NO_PKG_MANGLE'});

    $ENV{'LINTIAN_TEST_INSTALLED'} = 'no'
      unless exists $ENV{'LINTIAN_TEST_INSTALLED'};

    my $cwd = Cwd::getcwd();

    if ($ENV{'LINTIAN_TEST_INSTALLED'} eq 'yes') {
        $ENV{'LINTIAN_ROOT'} = '/usr/share/lintian';
        $ENV{'LINTIAN_FRONTEND'} = '/usr/bin/lintian';
    } else {
        $ENV{'LINTIAN_ROOT'} = $cwd;
        $ENV{'LINTIAN_FRONTEND'} = "$cwd/frontend/lintian";
    }

    $ENV{'LINTIAN_DPLINT_FRONTEND'}= "$ENV{'LINTIAN_ROOT'}/frontend/dplint";

    $ENV{'LINTIAN_TEST_ROOT'} = $cwd;
}

use lib "$ENV{'LINTIAN_TEST_ROOT'}/lib";

use Lintian::Internal::FrontendUtil qw(default_parallel);

use Test::Lintian::ConfigFile qw(read_config);
use Test::Lintian::Filter
  qw(find_selected_scripts find_selected_lintian_testpaths);
use Test::Lintian::Helper
  qw(rfc822date cache_dpkg_architecture_values get_latest_policy get_recommended_debhelper_version);
use Test::Lintian::Prepare qw(filleval);
use Test::Lintian::Run qw(logged_runner);
use Test::ScriptAge qw(perl_modification_epoch our_modification_epoch);

use constant SPACE => q{ };
use constant INDENT => q{    };
use constant NEWLINE => qq{\n};
use constant EMPTY => q{};
use constant YES => q{yes};
use constant NO => q{no};

# display output immediately
STDOUT->autoflush;

# options
my $coverage;
my $debug;
my $dump_logs = 1;
my $numjobs = -1;
my $keep_going;
my $onlyrun;
my $outpath;
my $unattended;
my $verbose = 0;

Getopt::Long::Configure('bundling');
unless (
    Getopt::Long::GetOptions(
        'c|coverage:s'     => \$coverage,
        'd|debug+'         => \$debug,
        'j|jobs:i'         => \$numjobs,
        'k|keep-going'     => \$keep_going,
        'L|dump-logs!'     => \$dump_logs,
        'o|onlyrun:s'      => \$onlyrun,
        'u|unattended'     => \$unattended,
        'v|verbose'        => \$verbose,
        'w|work-dir:s'     => \$outpath,
        'h|help'           => sub {usage(); exit;},
    )
) {
    usage();
    die;
}

# check number of arguments
die('Please use -h for usage information.')
  if @ARGV > 1;

# get arguments
my ($testset) = @ARGV;

# default test set
$testset ||= 't';

# check test set directory
die "Cannot find testset directory $testset"
  unless -d $testset;

# make sure testset is an absolute path
$testset = rel2abs($testset);

# calculate a default test work directory if none given
$outpath ||= dirname($testset) . '/debian/test-out';

# create test work directory unless it exists
make_path($outpath)
  unless -e $outpath;

# make sure test work path is a directory
die "Test work directory $outpath is not a directory"
  unless -d $outpath;

# make sure outpath is absolute
$outpath = rel2abs($outpath);

my $ACTIVE_JOBS = 0;

my $output_is_tty = -t STDOUT;

# get lintian modification date
my @lintianparts = (
    'checks', 'collection', 'commands', 'data',
    'frontend', 'profiles', 'vendors', 'lib/Lintian'
);
my @lintianfiles
  = map { File::Find::Rule->file->in("$ENV{'LINTIAN_ROOT'}/$_") }@lintianparts;
push(@lintianfiles, $ENV{'LINTIAN_FRONTEND'});
push(@lintianfiles, $ENV{'LINTIAN_DPLINT_FRONTEND'});
$ENV{'LINTIAN_EPOCH'}
  = max(map { -e $_ ? stat($_)->mtime : time } @lintianfiles);
say 'Lintian modified on '. rfc822date($ENV{'LINTIAN_EPOCH'});

my $error;
my $string = capture_merged {
    my @command = ($ENV{'LINTIAN_FRONTEND'}, '--version');
    system(@command) == 0
      or $error = "system @command failed: $?";
};
die $string . $error
  if length $error;

chomp $string;
my ($version) = $string =~ qr/^\S+\s+v(.+)$/;
die 'Cannot get Lintian version' unless length $version;
say "Version under test is $version.";

say EMPTY;

# set environment for coverage
if (defined $coverage) {
    # Only collect coverage for stuff that D::NYTProf and
    # Test::Pod::Coverage cannot do for us.  This makes cover use less
    # RAM in the other end.
    my @criteria = qw(statement branch condition path subroutine);
    my $args= '-MDevel::Cover=-silent,1,+ignore,^(.*/)?t/scripts/.+';
    $args .= ',+ignore,/usr/bin/.*,+ignore,(.*/)?Dpkg';
    $args .= ',-coverage,' . join(',-coverage,', @criteria);
    $args .= ',' . $coverage if $coverage ne '';
    $ENV{'LINTIAN_COVERAGE'} = $args;

    $ENV{'HARNESS_PERL_SWITCHES'} //= EMPTY;
    $ENV{'HARNESS_PERL_SWITCHES'} .= SPACE . $args;
}

# Devel::Cover + one cover_db + multiple processes is a recipe
# for corruptions.  Force $numjobs to 1 if we are running under
# coverage.
$numjobs = 1 if exists $ENV{'LINTIAN_COVERAGE'};

# tie verbosity to debug
$verbose = 1 + $debug if $debug;

# can be 0 without value ("-j"), and -1 if option was not specified at all
$numjobs = default_parallel() if $numjobs <= 0;
say "Running up to $numjobs tests concurrently"
  if $numjobs > 1 && $verbose >= 2;

$ENV{'DUMP_LOGS'} = $dump_logs//NO ? YES : NO;

# Disable translation support in dpkg as it is a considerable
# unnecessary overhead.
$ENV{'DPKG_NLS'} = 0;

my $helperpath = "$testset/bin";
if (-d $helperpath) {
    my $helpers = rel2abs($helperpath)// die("Cannot resolve $helperpath: $!");
    $ENV{'PATH'} = "$helpers:$ENV{'PATH'}";
}

# get architecture
cache_dpkg_architecture_values();
say "Host architecture is $ENV{'DEB_HOST_ARCH'}.";

# get latest policy version and date
($ENV{'POLICY_VERSION'}, $ENV{'POLICY_EPOCH'}) = get_latest_policy();
say "Latest policy version is $ENV{'POLICY_VERSION'} from "
  . rfc822date($ENV{'POLICY_EPOCH'});

# get current debhelper compat level; do not name DH_COMPAT; causes conflict
$ENV{'DEFAULT_DEBHELPER_COMPAT'} = get_recommended_debhelper_version();
say
"Using compat level $ENV{'DEFAULT_DEBHELPER_COMPAT'} as a default for packages built with debhelper.";

# get harness date, including templates, skeletons and whitelists
my @harnessparts
  = ('t/bin', 't/runners', 't/templates', 't/skeletons', 't/whitelists');
my @harnessfiles
  = map { File::Find::Rule->file->in("$ENV{'LINTIAN_TEST_ROOT'}/$_") }
  @harnessparts;
my $harness_files_epoch
  = max(map { -e $_ ? stat($_)->mtime : time } @harnessfiles);
$ENV{'HARNESS_EPOCH'}
  = max(our_modification_epoch, perl_modification_epoch, $harness_files_epoch);
say 'Harness modified on '. rfc822date($ENV{'HARNESS_EPOCH'});

say EMPTY;

# print environment
my @vars = sort keys %ENV;
say 'Environment:' if @vars;
for my $var (@vars) { say INDENT . "$var=$ENV{$var}" }

say EMPTY;

my $status = 0;

my $formatter = TAP::Formatter::File->new({
    errors => 1,
    jobs => $numjobs,
});
$formatter = TAP::Formatter::Console->new({
        errors => 1,
        jobs => $numjobs,
        color => 1,
    }) if -t STDOUT;

my $harness = TAP::Harness->new({
    formatter => $formatter,
    jobs => $numjobs,
    lib => ["$ENV{'LINTIAN_TEST_ROOT'}/lib"],
});

my $aggregator = TAP::Parser::Aggregator->new;
$aggregator->start;

my @runscripts;
my $scriptpath = "$testset/scripts";

# add selected scripts
push(@runscripts, find_selected_scripts($scriptpath, $onlyrun));

# always add internal harness tests
my @requiredscripts;
@requiredscripts
  = sort File::Find::Rule->file()->name('*.t')->in("$scriptpath/harness")
  unless length $onlyrun;
push(@runscripts, @requiredscripts);

# remove any duplicates
@runscripts = uniq @runscripts;

# make all paths relative
@runscripts = map { abs2rel($_) } @runscripts;

say 'Running selected and required Perl test scripts.';
say EMPTY;

# run scripts through harness
$harness->aggregate_tests($aggregator, sort @runscripts);

unless (!@runscripts || $aggregator->all_passed || $keep_going) {
    $aggregator->stop;
    $formatter->summary($aggregator);
    exit 1;
}

say EMPTY;

# find test paths
my @testpaths = find_selected_lintian_testpaths($testset, $onlyrun);

# for built test packages
my $buildroot = "$outpath/packages";

# for built test packages
my $evalroot = "$outpath/eval";

# prepare test
my $filleval = IO::Async::Function->new(
    code => sub {
        my ($specpath) = @_;

        # label process
        $0 = "Lintian prepare test: $specpath";

        # calculate destination
        my $relative = path($specpath)->relative("$testset/recipes");
        my $buildpath = $relative->absolute($buildroot)->stringify;
        my $evalpath = $relative->absolute($evalroot)->relative->stringify;

        my $error;

        # capture output
        my $log = capture_merged {

            try {

                # remove destination
                path($evalpath)->remove_tree
                  if -e $evalpath;

                path($evalpath)->mkpath;

                # prepare
                filleval("$specpath/eval", $evalpath, $testset);

                my $traversal = Cwd::realpath("$buildpath/subject");

                if (length $traversal) {
                    die "Cannot link to subject in $buildpath"
                      if system("cd $evalpath; ln -s $traversal subject");
                }

            }catch {
                # catch any error
                $error = $_;
            };
        };

        # save log;
        my $logfile = "$evalpath/log";
        path($logfile)->spew_utf8($log) if $log;

        # print something if there was an error
        die(($log // EMPTY) . "Preparation failed for $specpath: $error")
          if $error;

        return $specpath;
    },
    max_workers => $numjobs,
    max_worker_calls => 1,
);

my $loop = IO::Async::Loop->new;
$loop->add($filleval);

$SIG{INT} = sub { $filleval->stop; die "Caught a sigint $!" };
my @filltasks = map {$filleval->call(args => [$_])} sort @testpaths;

my $allfilled = Future->wait_all(@filltasks);

$loop->await($allfilled);

# remap paths from testset to outpath to get work directories
my @workpaths
  = map { rel2abs(abs2rel($_, "$testset/recipes"), "$outpath/eval") }
  @testpaths;

# if ($platforms ne 'any') {
#     my @wildcards = split(SPACE, $platforms);
#     my @matches= map {
#         qx{dpkg-architecture -a $ENV{'DEB_HOST_ARCH'} -i $_; echo -n \$?}
#     } @wildcards;
#     unless (any { $_ == 0 } @matches) {
#         say 'Architecture mismatch';
#         return;
#     }
# }

# make all paths relative to current directory
@workpaths = map { path($_)->relative } @workpaths;

# add the scripts in generated tests to be run
my @workscripts;
for my $path (@workpaths) {

    my @runners = File::Find::Rule->file->name('*.t')->in($path);

    die "No runner in $path"
      unless scalar @runners;
    die "More than one runner in $path"
      if scalar @runners > 1;

    push(@workscripts, @runners);
}

# run scripts through harness
$harness->aggregate_tests($aggregator, sort @workscripts);

$aggregator->stop;
$formatter->summary($aggregator);

say EMPTY;

$status = 1
  unless $aggregator->all_passed;

if (-t STDOUT && !$unattended) {
    my @failed = $aggregator->failed;
    say 'Offering to re-calibrate the tags expected in tests that failed.'
      if @failed;

    my $accept_all;

    for my $scriptpath (@failed) {
        my $workpath = dirname($scriptpath);

        my $descpath = "$workpath/desc";
        my $testcase = read_config($descpath);

        my $relative = abs2rel($workpath, $evalroot);
        my $testpath = abs2rel(rel2abs($relative, $testset));

        say EMPTY;
        say 'Failed test: ' . colored($testpath, 'bold white on_blue');

        if ($testcase->{match_strategy} eq 'tags') {

            my $diffpath = "$workpath/tagdiff";
            next
              unless -r $diffpath;

            my $diff = path($diffpath)->slurp;
            print $diff;

        } elsif ($testcase->{match_strategy} eq 'literal') {

            my $actualpath = "$workpath/literal.actual.parsed";
            next
              unless -r $actualpath;
            my @command
              = ('diff', '-uN', "$testpath/eval/literal", $actualpath);
            say join(SPACE, @command);
            system(@command);

        } else {
            say 'Do not know how to fix tests using matching strategy '
              . $testcase->{match_strategy} . '.';
            next;
        }

        unless ($accept_all) {

            print
'>>>  Fix test (y), accept all (a), do not fix (n), quit (q/default)? ';

            my $decision = <STDIN>;
            chomp $decision;

            last
              if $decision eq 'q' || $decision eq EMPTY;

            next
              unless $decision eq 'y' || $decision eq 'a';

            $accept_all = 1
              if $decision eq 'a';
        }

        if ($testcase->{match_strategy} eq 'tags') {

            # create tags if needed; helps when writing new tests
            my $tagspath = "$testpath/eval/tags";
            path($tagspath)->touch
              unless -e $tagspath;

            my $diffpath = "$workpath/tagdiff";
            next
              unless -r $diffpath;

            my @adjustargs = ($diffpath, $tagspath);
            unshift(@adjustargs, '-i')
              unless $accept_all;

            die "Cannot run tagadjust for $testpath"
              if system('tagadjust', @adjustargs);

            # also copy the new tags to workpath; no need to rebuild
            die "Cannot copy updated tags to $workpath"
              if system('cp', $tagspath, "$workpath/tags");

        } elsif ($testcase->{match_strategy} eq 'literal') {

            my $actualpath = "$workpath/literal.actual.parsed";
            next
              unless -r $actualpath;

            die "Cannot copy to accept literal output for $testpath"
              if system('cp', $actualpath, "$testpath/eval/literal");

        }
    }

    say NEWLINE . 'Accepted all remaining tag changes.'
      if $accept_all;

} else {
    my @crashed = $aggregator->parse_errors;

    say 'Showing full logs for tests with parse errors.'
      if @crashed;

    for my $absolutepath (@crashed) {
        my $scriptpath = abs2rel($absolutepath);
        my $workpath = dirname($scriptpath);

        say EMPTY;
        say "Log for test $scriptpath:";

        my $logpath = "$workpath/log";
        my $log = path($logpath)->slurp;
        print $log;
    }
}

# give a hint if not enough tests were run
unless (scalar @runscripts - scalar @requiredscripts + scalar @workscripts
    || $onlyrun eq 'minimal:') {
    quick_hint($onlyrun);
    exit 1;
}

exit $status;

# program is done

sub usage {
    print <<"END";
Usage: $0 [options] [-j [<jobs>]] <testset-directory>

    --onlyrun   Select only some tests for a quick check
    --coverage  Run Lintian under Devel::Cover (Warning: painfully slow)
    -d          Display additional debugging information
    --dump-logs Print build log to STDOUT, if a build fails.
    -j [<jobs>] Run up to <jobs> jobs in parallel.
                If -j is passed without specifying <jobs>, the number
                of jobs started is <nproc>+1.
    -k          Do not stop after one failed test
    -v          Be more verbose
    --help, -h  Print this help and exit

    The option --onlyrun  causes runtests to only run tests that match
    the particular selection.  This parameter can be a list of selectors:
    what:<which>[,<what:...>]

      * test:<testname>
        - Run the named test. Please note that testnames may not be
          unique, so it may run more than one test.
      * script:(<script-name> || <dir-in-scripts-suite>)
        - Run the named code quality script or all in the named directory.
          E.g. "01-critic" will run all tests in "t/scripts/01-critic/".
      * check:<check-name>
        - Run all tests related to the given check.
      * suite:<suite>
        - Run all tests in the named suite.
      * tag:<tag-name>
        - Run any test that lists <tag-name> in "Test-For" or
          "Test-Against".

Test artifacts are cached in --work-dir [default: debian/test-out] and
will generally be reused to save time. To recreate the test packages,
run 't/bin/build-test-packages'.
END
    return;
}

sub quick_hint {
    my ($selection) = @_;
    print <<"END";

No tests were selected by your filter:

    $selection

To select your tests, please use an appropriate argument with a
selector like:

    'suite:', 'test:', 'check:', 'tag:', or 'script:'

You can also use 'minimal:', which runs only the tests that cannot
be turned off, such as the internal tests for the harness.
END
    return;
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
