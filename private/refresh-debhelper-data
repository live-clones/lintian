#!/bin/sh

#    Copyright © 2008 by Raphael Geissert <atomo64@gmail.com>
#    Copyright © 2017-2018 Chris Lamb <lamby@debian.org>
#
#    This file is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This file is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this file.  If not, see <http://www.gnu.org/licenses/>.

set -e

if [ -z "$1" ]; then
    printf "Usage: %s path/to/lintian/data [Contents-arch.(gz|bz2|)]\n" \
        "$(basename "$0")"
    cat <<INFO

If the Contents file is specified, the list of dh_ commands found there will
be compared with the list at lintian/data/debhelper/dh_commands and will
indicate if the list is up to date with an exit status of zero.

If the Contents file is not specified, the script will download the following
files from a mirror (which should be specified via the DEB_MIRROR env var, 
which defaults to https://deb.debian.org/debian and is used directly
without any kind of parsing so one can play with it):
* main/Contents-i386.gz, main/binary-i386/Packages.gz
* Binary packages found at Contents shipping dh_ commands
Any special parameter can be passed to wget via WGET_ARGS, if needed.

Other options:
Other variables such as GREP_OPTIONS can be used to enable things like --mmap.
INFO
    exit
fi

readonly lintian_data="$(readlink -f "$1")"
readonly contents="$(readlink -f "$2")"
readonly dh_regex='^(usr/bin/dh_|usr/share/perl5/Debian/Debhelper/Sequence/).'
readonly dh_command_perl_regex='^usr/bin/(dh_[^\s]+)\s+[\w-]+/([^,]+).*'
readonly dh_addon_perl_regex='^usr/share/perl5/Debian/Debhelper/Sequence/([^\s]+)\.pm\s+[\w-]+/([^,]+).*'
current_date=$(date -u  '+%Y-%m-%d %H:%M')

[ -d "$lintian_data" ] || {
    printf "%s is not a directory, aborting" "$lintiandata" >&2
    exit 1
}

[ ! -z "$contents" -a ! -f "$contents" ] && {
    printf "%s is not a file, aborting" "$contents" >&2
    exit 1
}

readonly workdir="$(mktemp -d)"

cleanup () {
        [ ! -d "$workdir" ] || rm -rf "$workdir"
}; trap cleanup EXIT

cd "$workdir"

create_data_file() {
    local file="$1" basename
    cat > "$file" <<EOF
# This file is generated from private/refresh-debhelper-data.
# It was generated on ${current_date}
EOF
    if [ -f "${file}-manual" ] ; then
        basename=$(basename "$file")
        cat >> "$file" <<EOF
#
# If the script generates an insufficient/incorrect value for a
# single item, please have a look at ${basename}-manual.
#
EOF
    fi

    echo >> "$file"
    LC_ALL=C sort -u >> "$file"
}

mirror="${DEB_MIRROR:=https://deb.debian.org/debian}"
WGET_ARGS="${WGET_ARGS:=-nv}"

offline=0
[ -z "$contents" ] || offline=1

if [ $offline -eq 1  ]; then

    # offline may not work past the bullseye release
    # archive now produces Contents-{all,i386}.gz
    # this code now needs both

    known_commands="$lintian_data/debhelper/dh_commands"
    [ -f "$known_commands" ] || exit 1
    new_commands="$workdir/new"

    case "$contents" in
        *.gz)
            command="zgrep"
        ;;
        *.bz2)
            command="bzgrep"
        ;;
        *)
            command="grep"
        ;;
    esac
    which "$command" 2>&1 1>/dev/null || exit 2

    $command -E "$dh_regex" "$contents" \
        | perl -p -w -E 's#'"$dh_command_perl_regex"'#$1=$2#g;' \
        | sort > "$new_commands"
    cmp -s "$known_commands" "$new_commands"
    exit

else
    mkdir -p "$lintian_data/debhelper"

    for architecture in all amd64; do

        contents_url="$mirror"/"dists/sid/main/Contents-${architecture}.gz"

        echo wget "$contents_url"
        /usr/bin/wget $WGET_ARGS "$contents_url"

        zgrep -E "$dh_regex" "Contents-${architecture}.gz" > "dh_entries-${architecture}"

        cat "dh_entries-${architecture}" \
            | perl -n -w -E 's#'"$dh_command_perl_regex"'#$1=$2# and print' \
            | sed 's/=debhelper$/=debhelper | debhelper-compat/' \
                  > "dh_commands-${architecture}"

        cat "dh_commands-${architecture}" >> dh_commands

        cat "dh_entries-${architecture}" \
            | perl -n -w -E 's#'"$dh_addon_perl_regex"'#$1=$2# and print' \
            | sed 's/=debhelper$/=debhelper | debhelper-compat/' \
                  > "dh_addons-${architecture}"

        cat "dh_addons-${architecture}" >> dh_addons

        cat "dh_commands-${architecture}" \
            | cut -d '|' -f 1 | sed 's/\s*$//' \
            | cut -d '=' -f 2 | sort -u > "dh_packages-${architecture}"

        cat "dh_packages-${architecture}" >> dh_packages

        packages_url="$mirror"/"dists/sid/main/binary-${architecture}/Packages.gz"

        echo wget "$packages_url"
        /usr/bin/wget $WGET_ARGS -O "Packages-${architecture}.gz" "$packages_url"

        gunzip "Packages-${architecture}.gz"

        for package in $(cat "dh_packages-${architecture}"); do

            fn="$(grep-dctrl -n -P -X "$package" -sFilename Packages-${architecture})"

            deb_url="$mirror"/"$fn"

            echo wget "$deb_url"
            /usr/bin/wget $WGET_ARGS "$deb_url"

            file="$(basename "$fn")"
            dpkg-deb -x "$file" "$(mktemp -d -p .)"
            rm -f "$file"

            find */ | grep -Ev '^[^/]+/usr/bin/dh_.+$' \
                | xargs rm >/dev/null 2>&1 || true
            find */ -type l -print | xargs rm >/dev/null 2>&1 || true
        done

        grep -lr autoscript */ \
            | sed 's,.*/usr/bin/,,g' > "maint_commands-${architecture}"

        cat "maint_commands-${architecture}" >> maint_commands

        grep -lr misc:Depends */ \
             | sed 's,.*/usr/bin/,,g' | grep -v dh_gencontrol \
             > "miscDepends_commands-${architecture}"

        cat "miscDepends_commands-${architecture}" >> miscDepends_commands

    done

    for f in commands packages; do
        rf="$lintian_data/debhelper/dh_$f"
        create_data_file "$rf" < "dh_$f"
    done

    for f in addons; do
        rf="$lintian_data/common/dh_$f"
        create_data_file "$rf" < "dh_$f"
    done

    for f in maint miscDepends; do
        rf="$lintian_data/debhelper/${f}_commands"
        create_data_file "$rf" < "${f}_commands"
    done
fi

# Local Variables:
# indent-tabs-mode: nil
# End:
# vim: syntax=sh sw=4 sts=4 sr et
