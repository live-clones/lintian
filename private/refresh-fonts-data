#!/usr/bin/perl
#
# Copyright © 2008 by Raphael Geissert <atomo64@gmail.com>
# Copyright © 2017-2018 Chris Lamb <lamby@debian.org>
# Copyright © 2021 Felix Lechner
#
# This program is free software.  It is distributed under the terms of
# the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use v5.20;
use warnings;
use utf8;

use Const::Fast;
use File::Basename;
use List::SomeUtils qw(uniq);
use IPC::Run3;
use Path::Tiny;
use PerlIO::gzip;
use Time::Piece;
use Unicode::UTF8 qw(encode_utf8);

const my $EMPTY => q{};
const my $SPACE => q{ };

const my $NEWLINE => qq{\n};

if (@ARGV != 1) {
    usage();
    exit;
}

my ($data_folder) = @ARGV;

die encode_utf8('No data folder')
  unless length $data_folder;

die encode_utf8('Data folder does not exist')
  unless -d $data_folder;

my $work_folder
  = Path::Tiny->tempdir(TEMPLATE => 'refresh-debhelper-data-XXXXXXXXXX');

my $mirror_base = 'https://deb.debian.org/debian';

# neutral sort order
local $ENV{LC_ALL} = 'C';

my $port = 'amd64';

my %installable_names_by_font;

my @wget_command = qw{/usr/bin/wget --no-verbose};

for my $architecture ('all', $port) {

    my $file_name = "Contents-$architecture.gz";
    my $local_path = "$work_folder/$file_name";
    my $url = "$mirror_base/dists/sid/main/$file_name";

    say $EMPTY;
    say encode_utf8("Getting $file_name");

    run3([@wget_command, "--output-document=$local_path", $url]);

    open(my $fd, '<:gzip', $local_path)
      or die encode_utf8("Cannot open $local_path.");

    while (my $line = <$fd>) {

        chomp $line;

        my ($path, $finder) = split($SPACE, $line, 2);
        next
          unless length $path
          && length $finder;

        if ($path =~ m{ [.] (?:[to]tf|pfb) $}ix) {

            my @locations = split(m{,}, $finder);
            for my $location (@locations) {

                my ($section, $installable_name) = split(m{/}, $location, 2);

        # Record only packages starting with ttf-, otf-, t1-, xfonts- or fonts-
                next
                  unless $installable_name
                  =~ m{^ (?: [to]tf | t1 | x?fonts ) - }x;

                # Fonts in xfonts-tipa are really shipped by tipa.
                $installable_name = 'tipa'
                  if $installable_name eq 'xfonts-tipa';

                my $basename = basename($path);
                my $font = lc $basename;

                $installable_names_by_font{$font} //= [];
                push(@{$installable_names_by_font{$font}}, $installable_name);
            }

            next;
        }
    }

    close $fd;
}

say $EMPTY;

path($data_folder)->mkpath('files');

my @font_lines;
for my $font (keys %installable_names_by_font) {

    my @alternatives = @{$installable_names_by_font{$font}};

    push(@font_lines, $font . $SPACE . $_) for uniq @alternatives;
}

create_data_file("$data_folder/files/fonts", (sort @font_lines));

exit;

sub create_data_file {
    my ($path, @lines) = @_;

    my $text = join($NEWLINE, @lines) . $NEWLINE;

    my $current_date = gmtime->datetime . 'Z';

    my $preamble =<<"EOF_EOF_EOF";
# Generated by private/refresh-fonts-data on $current_date
EOF_EOF_EOF

    my $contents = $preamble . $NEWLINE . $text;

    say "Writing $path";
    path($path)->spew_utf8($contents);

    return;
}

sub usage {
    my $message =<<"EOF_EOF_EOF";
Usage: $0 <data-directory>

The program will download the following files from https://deb.debian.org:

* main/Contents-all.gz
* main/Contents-amd64.gz
EOF_EOF_EOF

    print encode_utf8($message);

    return;
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
