#!/usr/bin/perl
#
# frontend/lintian -- General purpose frontend for Debian package checker
#
# Copyright © 2013 Niels Thykier
# - Based on lintian, which is/was:
#   Copyright © 1998 Christian Schwarz, Richard Braakman (and others)
#
# This program is free software.  It is distributed under the terms of
# the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use v5.20;
use warnings;
use utf8;

# use Lintian modules that belong to this program
use FindBin;
use lib "$FindBin::RealBin/../lib";

# substituted during package build
my $LINTIAN_VERSION;

use Cwd qw(getcwd realpath);
use File::BaseDir qw(config_home config_files data_home);
use File::Basename;
use Getopt::Long();
use Path::Tiny;

use Lintian::IPC::Run3 qw(safe_qx);
use Lintian::Util qw(version_from_changelog);

use constant EMPTY => q{};
use constant COLON => q{:};

binmode(STDOUT, ':encoding(UTF-8)');

$ENV{LINTIAN_BASE} = realpath("$FindBin::RealBin/..")
  // die 'Cannot resolve LINTIAN_BASE';

my @INCLUDE_DIRS;
my $user_dirs = 1;
my %opthash = (
    'include-dir=s' => \@INCLUDE_DIRS,
    'user-dirs!' => \$user_dirs,
);

Getopt::Long::config(
    'bundling', 'no_getopt_compat',
    'no_auto_abbrev', 'require_order',
    'pass_through'
);

Getopt::Long::GetOptions(%opthash)
  or die "error parsing options\n";

# only absolute paths
my @RESTRICTED_CONFIG_DIRS;

if ($user_dirs) {
    my $data_home;
    my $legacy_user_data;

    $data_home = data_home('lintian')
      if exists $ENV{'HOME'} || exists $ENV{'XDG_CONFIG_HOME'};

    $legacy_user_data = "$ENV{HOME}/.lintian"
      if exists $ENV{'HOME'};

    if (defined($data_home) and $data_home !~ m@^/@) {
        # Turn the path into an absolute one.  Just in case
        # someone sets a relative HOME dir.
        my $cwd = getcwd();
        $data_home = "${cwd}/${data_home}";
    }

    @RESTRICTED_CONFIG_DIRS = grep { -d }
      grep { length } ($data_home, $legacy_user_data, '/etc/lintian');
}

# only absolute paths
my @CONFIG_DIRS = grep { -d }
  grep { length } map { realpath($_) } ($ENV{'LINTIAN_BASE'}, @INCLUDE_DIRS);

my @HELPER_DIRS = grep { -d } map { "$_/helpers" } @CONFIG_DIRS;

$ENV{'LINTIAN_CONFIG_DIRS'} = join(COLON, @CONFIG_DIRS);
$ENV{'LINTIAN_RESTRICTED_CONFIG_DIRS'}= join(COLON, @RESTRICTED_CONFIG_DIRS);
$ENV{'LINTIAN_HELPER_DIRS'} = join(COLON, @HELPER_DIRS);

$ENV{'LINTIAN_ENABLE_USER_DIRS'} = $user_dirs ? 1 : 0;

$ENV{'LINTIAN_CALLED_AS'} = $FindBin::Script;

if (my $coverage_arg = $ENV{'LINTIAN_COVERAGE'}) {
    my $p5opt = $ENV{'PERL5OPT'}//q{};
    $p5opt .= ' ' if $p5opt ne q{};
    $ENV{'PERL5OPT'} = "${p5opt} ${coverage_arg}";
}

my $truename = $0;
my $cmd = $FindBin::Script;

for my $folder (@CONFIG_DIRS) {

    my $tool_path = "$folder/commands/$cmd";
    if (-f $tool_path) {

        die "$cmd ($tool_path) is present but not executable!"
          unless -x $tool_path;

        {
            # Scope here it to avoid a warning about exec not returning.
            exec {$tool_path} $truename, @ARGV;
        }

        die
"Running $cmd failed!\n  Command: $tool_path @ARGV\n  Error from exec: $!";
    }

    my $tool_pm_path = "${tool_path}.pm";
    if (-f $tool_pm_path) {

        require lib;
        lib->import(grep { -d } map { "$_/lib" } @CONFIG_DIRS);

        $ENV{LINTIAN_VERSION} = $LINTIAN_VERSION // guess_version(__FILE__);

        $0 = $cmd;

        require $tool_pm_path;

        my $module = $cmd;

        # replace slashes with double colons
        $module =~ s{/}{::}g;

        # replace some characters with underscores
        $module =~ s{[-.]}{_}g;

        die "${tool_pm_path} does not define a main sub"
          unless $module->can('main');

        eval {$module->can('main')->();};

        if (my $err = $@) {
            # main threw an exception
            $err .= "\n" if ($err !~ m/\n\Z/);
            print STDERR $err;
            exit(255);
        }

        exit;
    }
}

die "$cmd is not available";

sub guess_version {

    my $guess = version_from_git($ENV{LINTIAN_BASE});
    $guess ||= version_from_changelog($ENV{LINTIAN_BASE});

    return $guess
      if length $guess;

    die 'Unable to determine the version automatically!?';
}

=item version_from_git

=cut

sub version_from_git {
    my ($source_path) = @_;

    my $git_path = "$source_path/.git";

    return EMPTY
      unless -d $git_path;

    my $guess = safe_qx('git', "--git-dir=$git_path", 'describe');
    chomp $guess;

    return ($guess // EMPTY);
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
